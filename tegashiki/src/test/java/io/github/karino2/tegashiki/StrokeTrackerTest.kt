package io.github.karino2.tegashiki

import org.junit.Test

import org.junit.Assert.*
import kotlin.math.min

class StrokeTrackerTest {
    fun createStrokeTensor() = KdFTensorTest.createTestStrokeTensor()

    @Test
    fun normalizeIntermediateValueTest() {
        val stroke = createStrokeTensor()

        val nonzeroMask = stroke[all, all, n(2)].scalar_equal(1f)
        val nonzero = stroke[nonzeroMask]
        val xmax = nonzero[all, n(0)].max()
        val ymax = nonzero[all, n(1)].max()
        val xmin = nonzero[all, n(0)].min()
        val ymin = nonzero[all, n(1)].min()
        assertEquals(839f, xmax)
        assertEquals(2008f, ymax)
        assertEquals(7f, xmin)
        assertEquals(8f, ymin)
    }

    val NORMALIZE_MAX=2000f

    @Test
    fun normalizeFirstStroke() {
        val outTensor = KdFTensor(13 * 50 * 3).reshape(13, 50, 3)

        val stroke = KdFTensorTest.createTestStrokeTensor()

        val nonzeroMask = stroke[all, all, n(2)].scalar_equal(1f)
        val nonzero = stroke[nonzeroMask]
        val xmax = nonzero[all, n(0)].max()
        val ymax = nonzero[all, n(1)].max()
        val xmin = nonzero[all, n(0)].min()
        val ymin = nonzero[all, n(1)].min()

        val xdelta = xmax-xmin+0.0001f
        val ydelta = ymax-ymin+0.0001f
        val scale = min(NORMALIZE_MAX.toFloat()/xdelta, NORMALIZE_MAX.toFloat()/ydelta)


        val rowMask = stroke[n(0), all, n(2)].scalar_equal(1f)
        val rowXY = stroke[n(0), all, all][rowMask]
        val rowLen = rowXY.shape[0]
        val originTensorX = rowXY[all, n(0)] - xmin
        val originTensorY = rowXY[all, n(1)]-ymin

        outTensor[n(0), r(0, rowLen), n(0)] = originTensorX*scale
        outTensor[n(0), r(0, rowLen), n(1)] = originTensorY*scale

        assertEquals(86.99999f, outTensor[0, 0, 0])
        assertEquals(76.99999f, outTensor[0, 31, 0])
        assertEquals(1146.9999f, outTensor[0, 0, 1])
        assertEquals(1899.9999f, outTensor[0, 31, 1])
    }


    @Test
    fun normalizeStroke() {
        val out_tensor = io.github.karino2.tegashiki.KdFTensor(13 * 50 * 3).reshape(13, 50, 3)
        val target = io.github.karino2.tegashiki.StrokeTracker(out_tensor)

        val stroke = KdFTensorTest.createTestStrokeTensor()

        repeat(3) {
            val nonzeroMask = stroke[n(it), all, n(2)].scalar_equal(1f)
            val xyRow = stroke[n(it), all, r(0, 2)][nonzeroMask]

            target.setNewStrokeTensor(xyRow)
            target.curIndex++
        }

        assertEquals(86.99999f, out_tensor[0, 0, 0])
        assertEquals(76.99999f, out_tensor[0, 31, 0])
        assertEquals(1146.9999f, out_tensor[0, 0, 1])
        assertEquals(1899.9999f, out_tensor[0, 31, 1])

        assertEquals(0f, out_tensor[1, 0, 0])
        assertEquals(254.99998f, out_tensor[1, 0, 1])
        assertEquals(13.999999f, out_tensor[1, 19, 0])
        assertEquals(1779.9999f, out_tensor[1, 19, 1])

        assertEquals(673.99994f, out_tensor[2, 0, 0])
        assertEquals(0f, out_tensor[2, 0, 1])
        assertEquals(621.99994f, out_tensor[2, 31, 0])
        assertEquals(488.99997f, out_tensor[2, 31, 1])
    }

    // The data of normalizeStroke is already normalized. generate shifted data.
    @Test
    fun normalizeStroke2() {

        val outTensor = io.github.karino2.tegashiki.KdFTensor(13 * 50 * 3).reshape(13, 50, 3)
        val target = io.github.karino2.tegashiki.StrokeTracker(outTensor)

        val stroke = KdFTensorTest.createStrokeTensor(SHIFTED_STROKE_TEXT)

        repeat(3) {
            val nonzeroMask = stroke[n(it), all, n(2)].scalar_equal(1f)
            val xyRow = stroke[n(it), all, r(0, 2)][nonzeroMask]

            target.setNewStrokeTensor(xyRow)
            target.curIndex++
        }

        assertEquals(86.99999f, outTensor[0, 0, 0], 0.01f)
        assertEquals(76.99999f, outTensor[0, 31, 0], 0.01f)
        assertEquals(1146.9999f, outTensor[0, 0, 1], 0.01f)
        assertEquals(1899.9999f, outTensor[0, 31, 1], 0.01f)

        assertEquals(0f, outTensor[1, 0, 0], 0.0001f)
        assertEquals(254.99998f, outTensor[1, 0, 1], 0.01f)
        assertEquals(13.999999f, outTensor[1, 19, 0], 0.01f)
        assertEquals(1779.9999f, outTensor[1, 19, 1], 0.01f)

        assertEquals(673.99994f, outTensor[2, 0, 0], 0.01f)
        assertEquals(0f, outTensor[2, 0, 1], 0.01f)
        assertEquals(621.99994f, outTensor[2, 31, 0], 0.01f)
        assertEquals(488.99997f, outTensor[2, 31, 1], 0.01f)
    }

    val SHIFTED_STROKE_TEXT="""
[[[23.80000114440918, 237.40000915527344, 1.0],
  [34.400001525878906, 235.40000915527344, 1.0],
  [46.400001525878906, 236.60000610351562, 1.0],
  [59.60000228881836, 242.1999969482422, 1.0],
  [73.0, 250.0, 1.0],
  [86.4000015258789, 261.3999938964844, 1.0],
  [98.4000015258789, 276.20001220703125, 1.0],
  [107.0, 291.3999938964844, 1.0],
  [113.5999984741211, 308.0, 1.0],
  [117.80000305175781, 324.0, 1.0],
  [119.5999984741211, 339.8000183105469, 1.0],
  [118.4000015258789, 354.0, 1.0],
  [115.0, 366.0, 1.0],
  [111.0, 376.0, 1.0],
  [105.20000457763672, 385.3999938964844, 1.0],
  [98.4000015258789, 392.0, 1.0],
  [90.4000015258789, 398.6000061035156, 1.0],
  [81.80000305175781, 402.6000061035156, 1.0],
  [73.0, 406.0, 1.0],
  [64.4000015258789, 407.20001220703125, 1.0],
  [56.400001525878906, 408.0, 1.0],
  [49.20000076293945, 408.0, 1.0],
  [42.60000228881836, 407.20001220703125, 1.0],
  [36.400001525878906, 406.3999938964844, 1.0],
  [31.80000114440918, 404.6000061035156, 1.0],
  [27.80000114440918, 403.8000183105469, 1.0],
  [25.200000762939453, 401.20001220703125, 1.0],
  [23.80000114440918, 399.8000183105469, 1.0],
  [22.600000381469727, 396.6000061035156, 1.0],
  [21.80000114440918, 394.6000061035156, 1.0],
  [22.600000381469727, 392.0, 1.0],
  [21.80000114440918, 388.0, 1.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0]],
 [[6.400000095367432, 59.0, 1.0],
  [7.200000286102295, 61.60000228881836, 1.0],
  [7.800000190734863, 70.20000457763672, 1.0],
  [8.600000381469727, 82.80000305175781, 1.0],
  [9.199999809265137, 100.80000305175781, 1.0],
  [9.800000190734863, 122.20000457763672, 1.0],
  [9.800000190734863, 148.1999969482422, 1.0],
  [10.40000057220459, 174.8000030517578, 1.0],
  [10.40000057220459, 202.60000610351562, 1.0],
  [9.800000190734863, 229.1999969482422, 1.0],
  [9.199999809265137, 254.0, 1.0],
  [9.199999809265137, 276.20001220703125, 1.0],
  [8.600000381469727, 296.6000061035156, 1.0],
  [7.800000190734863, 313.20001220703125, 1.0],
  [7.200000286102295, 328.0, 1.0],
  [6.400000095367432, 339.8000183105469, 1.0],
  [6.400000095367432, 349.3999938964844, 1.0],
  [7.200000286102295, 357.20001220703125, 1.0],
  [7.800000190734863, 362.8000183105469, 1.0],
  [9.199999809265137, 364.0, 1.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0]],
 [[141.1999969482422, 8.0, 1.0],
  [138.40000915527344, 11.600000381469727, 1.0],
  [128.0, 110.4000015258789, 1.0],
  [128.0, 109.5999984741211, 1.0],
  [128.0, 108.5999984741211, 1.0],
  [128.0, 104.80000305175781, 1.0],
  [128.0, 103.0, 1.0],
  [129.0, 95.5999984741211, 1.0],
  [130.8000030517578, 91.80000305175781, 1.0],
  [135.60000610351562, 85.4000015258789, 1.0],
  [137.40000915527344, 82.5999984741211, 1.0],
  [144.8000030517578, 77.0, 1.0],
  [146.8000030517578, 76.0, 1.0],
  [156.0, 76.0, 1.0],
  [158.0, 76.0, 1.0],
  [166.1999969482422, 77.0, 1.0],
  [168.1999969482422, 77.80000305175781, 1.0],
  [172.8000030517578, 84.4000015258789, 1.0],
  [172.8000030517578, 87.20000457763672, 1.0],
  [172.8000030517578, 93.5999984741211, 1.0],
  [171.8000030517578, 96.4000015258789, 1.0],
  [165.40000915527344, 103.0, 1.0],
  [162.60000610351562, 104.80000305175781, 1.0],
  [153.1999969482422, 109.5999984741211, 1.0],
  [150.40000915527344, 110.4000015258789, 1.0],
  [141.1999969482422, 112.4000015258789, 1.0],
  [138.40000915527344, 112.4000015258789, 1.0],
  [133.60000610351562, 111.4000015258789, 1.0],
  [132.8000030517578, 110.4000015258789, 1.0],
  [130.8000030517578, 107.5999984741211, 1.0],
  [130.8000030517578, 106.80000305175781, 1.0],
  [130.8000030517578, 105.80000305175781, 1.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0]],
 [[0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0]],
 [[0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0]],
 [[0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0]],
 [[0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0]],
 [[0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0]],
 [[0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0]],
 [[0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0]],
 [[0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0]],
 [[0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0]],
 [[0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0],
  [0.0, 0.0, 0.0]]]    """.trimIndent()



}